#pragma once
/**
	@author herumi
	@note modified new BSD license
	http://opensource.org/licenses/BSD-3-Clause
*/
#include <xbyak/xbyak_util.h>
#include <cmath>

namespace fmath2 {

namespace local {

union fi {
	float f;
	uint32_t i;
};

inline float cvt(uint32_t x)
{
	fi fi;
	fi.i = x;
	return fi.f;
}

struct ExpData {
	static const size_t TaylerN = 5;
	float minX; // exp(minX) = 0
	float maxX; // exp(maxX) = inf
	float log2; // log(2)
	float log2_e; // log_2(e) = 1 / log2
	float c[TaylerN]; // near to 1/(i + 1)!
	void init()
	{
		minX = cvt(0xc2aeac50);
		maxX = cvt(0x42b17218);
		log2 = std::log(2.0f);
		log2_e = 1 / log2;
#if 0
		// maxe=4.888831e-06
		float z = 1;
		for (size_t i = 0; i < TaylerN; i++) {
			c[i] = z;
			z /= (i + 2);
		}
#else
		// maxe=1.938668e-06
		const uint32_t tbl[TaylerN] = {
			0x3f800000,
			0x3effff12,
			0x3e2aaa56,
			0x3d2b89cc,
			0x3c091331,
		};
		for (size_t i = 0; i < TaylerN; i++) {
			c[i] = cvt(tbl[i]);
		}
#endif
	}
};

/*
The constans c are generated by Maple.
f := x->A+B*x+C*x^2+D*x^3+E*x^4+F*x^5;
g:=int((f(x)-exp(x))^2,x=-L..L);
sols:=solve({diff(g,A)=0,diff(g,B)=0,diff(g,C)=0,diff(g,D)=0,diff(g,E)=0,diff(g,F)=0},{A,B,C,D,E,F});
Digits:=1000;
s:=eval(sols,L=log(2)/2);
evalf(s,20);
*/
struct Code : public Xbyak::CodeGenerator {
	Xbyak::util::Cpu cpu;
	ExpData *expData;
	void (*exp_v_)(float *, size_t);
	Code()
	{
		size_t dataSize = sizeof(ExpData);
		dataSize = (dataSize + 4095) & ~4095;
		expData = (ExpData*)getCode();
		expData->init();
		setSize(dataSize);
		exp_v_ = getCode<void (*)(float *, size_t)>();
		genExp(*expData);
	}
	void genExp(const ExpData& data)
	{
	}
};

template<size_t dummy = 0>
struct C {
	static const Code code;
};

template<size_t dummy>
MIE_ALIGN(32) const Code C<dummy>::code;

} // fmath::local

inline float split(int *pn, float x)
{
	int n;
	if (x >= 0) {
		n = int(x + 0.5f);
	} else {
		n = int(x - 0.5f);
	}
	*pn = n;
	return x - n;
}

inline float expC(float x)
{
	const local::ExpData& C = *local::C<>::code.expData;
	x = std::min(x, C.maxX);
	x = std::max(x, C.minX);
	x *= C.log2_e;
	int n;
	float a = split(&n, x);
	/* |a| <= 0.5 */
	float b = a * C.log2;
	/* |b| <= 0.3466 */
	local::fi fi;
	fi.i = (n + 127) << 23; // 2^n
	/*
		e^b = 1 + b + b^2/2! + b^3/3! + b^4/4! + b^5/5!
		= 1 + b(1 + b(1/2! + b(1/3! + b(1/4! + b/5!))))
	*/
	x = C.c[4];
	x = b * x + C.c[3];
	x = b * x + C.c[2];
	x = b * x + C.c[1];
	x = b * x + C.c[0];
	x = b * x + C.c[0];
	return x * fi.f;
}

inline void exp_vC(float *px, size_t n)
{
	for (size_t i = 0; i < n; i++) {
		px[i] = expC(px[i]);
	}
}

void (*const exp_v)(float *px, size_t n) = local::C<>::code.exp_v_;

} // fmath2
